Problem: Given a collection of intervals, merge all overlapping intervals
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<pair<int, int>> mergeIntervals(vector<pair<int, int>>& intervals) {
    if (intervals.empty()) return {};
    sort(intervals.begin(), intervals.end());
    vector<pair<int, int>> merged;
    
    merged.push_back(intervals[0]);
    for (int i = 1; i < intervals.size(); i++) {
        if (merged.back().second >= intervals[i].first) {
            merged.back().second = max(merged.back().second, intervals[i].second);
        } else {
            merged.push_back(intervals[i]);
        }
    }
    return merged;
}

int main() {
    vector<pair<int, int>> intervals = {{1, 3}, {2, 4}, {5, 7}, {6, 8}};
    vector<pair<int, int>> merged = mergeIntervals(intervals);
    for (auto& interval : merged) {
        cout << "[" << interval.first << ", " << interval.second << "] ";
    }
    return 0;
}

output
[1, 4] [5, 8]

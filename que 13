Given weights and values of n items, determine the maximum value that can be obtained within a given weight capacity.

#include <iostream>
#include <vector>
using namespace std;

int knapsack(int W, vector<int>& wt, vector<int>& val, int n) {
    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));
    
    for (int i = 1; i <= n; i++) {
        for (int w = 1; w <= W; w++) {
            if (wt[i - 1] <= w) {
                dp[i][w] = max(dp[i - 1][w], val[i - 1] + dp[i - 1][w - wt[i - 1]]);
            } else {
                dp[i][w] = dp[i - 1][w];
            }
        }
    }
    return dp[n][W];
}

int main() {
    vector<int> wt = {1, 2, 3};
    vector<int> val = {10, 20, 30};
    int W = 4;
    int n = 3;
    cout << "Maximum value: " << knapsack(W, wt, val, n) << endl;
    return 0;
}
output
Maximum value: 50

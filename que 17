Perform DFS on a graph represented as an adjacency matrix.

#include <iostream>
#include <vector>
using namespace std;

void DFS(int v, vector<vector<int>>& adjMatrix, vector<bool>& visited) {
    visited[v] = true;
    cout << v << " ";
    
    for (int i = 0; i < adjMatrix[v].size(); i++) {
        if (adjMatrix[v][i] == 1 && !visited[i]) {
            DFS(i, adjMatrix, visited);
        }
    }
}

int main() {
    vector<vector<int>> adjMatrix = {{0, 1, 0, 1},
                                      {1, 0, 1, 0},
                                      {0, 1, 0, 0},
                                      {1, 0, 0, 0}};
    int n = adjMatrix.size();
    vector<bool> visited(n, false);
    
    cout << "DFS traversal starting from vertex 0: ";
    DFS(0, adjMatrix, visited);
    cout << endl;
    
    return 0;
}
output
DFS traversal starting from vertex 0: 0 1 2 3 


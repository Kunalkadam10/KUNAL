Given an array, count the number of inversions (a pair of elements (i, j) such that i < j and arr[i] > arr[j]).


#include <iostream>
#include <vector>
using namespace std;

int mergeAndCount(vector<int>& arr, int left, int mid, int right) {
    int count = 0;
    int n1 = mid - left + 1, n2 = right - mid;
    vector<int> leftArr(n1), rightArr(n2);
    
    for (int i = 0; i < n1; i++) leftArr[i] = arr[left + i];
    for (int i = 0; i < n2; i++) rightArr[i] = arr[mid + 1 + i];
    
    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k++] = leftArr[i++];
        } else {
            arr[k++] = rightArr[j++];
            count += (n1 - i); // All remaining elements in leftArr are greater
        }
    }
    while (i < n1) arr[k++] = leftArr[i++];
    while (j < n2) arr[k++] = rightArr[j++];
    
    return count;
}

int countInversions(vector<int>& arr, int left, int right) {
    if (left >= right) return 0;
    int mid = left + (right - left) / 2;
    int invCount = countInversions(arr, left, mid);
    invCount += countInversions(arr, mid + 1, right);
    invCount += mergeAndCount(arr, left, mid, right);
    return invCount;
}

int main() {
    vector<int> arr = {1, 20, 6, 4, 5};
    cout << "Number of inversions: " << countInversions(arr, 0, arr.size() - 1) << endl;
    return 0;
}
output
Number of inversions: 5

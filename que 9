#include <iostream>
#include <queue>

using namespace std;

class MedianFinder {
private:
    priority_queue<int> maxHeap; // Left half (Max-Heap)
    priority_queue<int, vector<int>, greater<int>> minHeap; // Right half (Min-Heap)

public:
    // Function to add a number
    void addNum(int num) {
        if (maxHeap.empty() || num <= maxHeap.top()) {
            maxHeap.push(num);
        } else {
            minHeap.push(num);
        }

        // Balance the heaps
        if (maxHeap.size() > minHeap.size() + 1) {
            minHeap.push(maxHeap.top());
            maxHeap.pop();
        } else if (minHeap.size() > maxHeap.size()) {
            maxHeap.push(minHeap.top());
            minHeap.pop();
        }
    }

    // Function to get the median
    double findMedian() {
        if (maxHeap.size() == minHeap.size()) {
            return (maxHeap.top() + minHeap.top()) / 2.0;
        }
        return maxHeap.top();
    }
};

// Driver code
int main() {
    MedianFinder mf;
    mf.addNum(1);
    mf.addNum(2);
    cout << "Median: " << mf.findMedian() << endl; // Output: 1.5
    mf.addNum(3);
    cout << "Median: " << mf.findMedian() << endl; // Output: 2
    return 0;
}
input
addNum(1);
addNum(2);
findMedian(); // Output: 1.5
addNum(3);
findMedian(); // Output: 2

output
Median: 1.5
Median: 2
